<!DOCTYPE html>
<html>
<!-- служебная часть -->

<head>
  <!-- заголовок страницы -->
  <title>Управление проектами</title>
  <!-- настраиваем служебную информацию для браузеров -->
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
  integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <!-- задаём CSS-стили прямо здесь же, чтобы всё было в одном файле -->
  <style type="text/css">
    /*Задаём общие параметры для всей страницы: шрифт и отступы*/
    body {
      text-align: center;
      margin: 10;
      font-family: Verdana, Arial, sans-serif;
      font-size: 16px;
    }

    /* Внешний вид заголовка первого уровня*/
    h1 {
      margin-bottom: 50px;
      font-weight: bold;
    }

    /* Внешний вид заголовка второго уровня*/
    h2 {
      font-size: 22px;
    }

    /* Настраиваем внешний вид поля ввода*/
    input {
      display: inline-block;
      margin: 20px auto;
      border: 2px solid #eee;
      padding: 10px 20px;
      font-family: Verdana, Arial, sans-serif;
      font-size: 16px;
    }

    /*Как будет выглядеть каждый элемент нашего списка*/
    .tdItem {
      text-align: left;
      padding: 10px;
      cursor: default;
      border-radius: 7px;
    }

    /*Что произойдёт, когда мы наведём курсор на любую задачу из списка*/
    .tdItem:hover {
      background-color: lightblue;
    }
    /*Закончили со стилями*/
  body {
      text-align:left;
      background: linear-gradient(to right, #FFC0CB, #ADD8E6); /* Исходный градиентный фон */
      background-size: 200% 200%;
      animation: gradientChange 5s linear infinite;
  }
  button {
      padding: 10px 20px;
      font-size: 16px;
      background-color: lightcoral;
      color: white;
      border: none;
      cursor: pointer;
      margin-top: 20px;
      border-radius: 20px;
  }

  @keyframes gradientChange {
      0% {
          background-position: 0% 50%;
      }
      50% {
          background-position: 100% 50%;
      }
      100% {
          background-position: 0% 50%;
      }
  }
</style>
<button onclick="changeBackground()">Изменить цвет фона</button>
  <script>
  const colors = ['#FFC0CB', '#ADD8E6', '#FFD700', '#90EE90', '#FFA07A']; // Красивые цвета
  let currentColorIndex = 0;

  function changeBackground() {
      document.body.style.background = `linear-gradient(to right, ${colors[currentColorIndex]}, ${colors[(currentColorIndex + 1) % colors.length]})`;
      currentColorIndex = (currentColorIndex + 1) % colors.length;
  }
  setInterval(changeBackground, 2000000)
 </script>
<body>
  
  <div class="container">
    <!-- Your content here -->
  </div>
</body>
</head>
<style>
  .container {
      margin-top: 50px;
      background: rgba(255, 255, 255, 0.8);
      border-radius: 15px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }
  .tdItem {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 10px;
      color: black;
  }
  .delete-btn {
      margin-left: 10px;
      cursor: pointer;
      color: red;
  }
</style>

<body>
  <div class="container">
    <div class="row">
      <div class="col-12">
        <h1>Управление проектами, делами и собой</h1>
      </div>
    </div>
  </div>
  <div class="container">
    <div class="row">
      <div class="col-12 col-sm-6 col-md-3 col-lg-3 col-xl-3">
        <h2 class="todo__caption">Сделать</h2>
        <!-- Поле ввода, куда пишем новые задачи «Сделать»-->
        <div id="tdl1App">
          <input type="text" class="form-control" placeholder="Новая задача">
          <!-- Создаём пока ещё пустой список «Сделать» -->
          <div class="tdl1Div">
            <ul class="List list-unstyled">
              <!-- Тут появятся наши задачи, когда мы их добавим -->
            </ul>
          </div>
        </div>
      </div>
      <div class="col-12 col-sm-6 col-md-3 col-lg-3 col-xl-3">
        <h2 class="todo__caption">Позвонить</h2>
        <!-- Поле ввода, куда пишем новые задачи «Позвонить» -->
        <div id="tdl2App">
          <input type="text" class="form-control" placeholder="Новая задача">
          <!-- Создаём пока ещё пустой список «Позвонить» -->
          <div class="tdl2Div">
            <ul class="List list-unstyled">
              <!-- Тут появятся наши задачи, когда мы их добавим -->
            </ul>
          </div>
        </div>
      </div>
      <div class="col-12 col-sm-6 col-md-3 col-lg-3 col-xl-3">
        <h2 class="todo__caption">Написать</h2>
        <!-- Поле ввода, куда пишем новые задачи «Написать»-->
        <div id="tdl3App">
          <input type="text" class="form-control" placeholder="Новая задача">
          <!-- Создаём пока ещё пустой список «Написать» -->
          <div class="tdl3Div">
            <ul class="List list-unstyled">
              <!-- Тут появятся наши задачи, когда мы их добавим -->
            </ul>
          </div>
        </div>
      </div>
      <div class="col-12 col-sm-6 col-md-3 col-lg-3 col-xl-3">
        <h2 class="todo__caption">Идеи</h2>
        <!-- Поле ввода, куда пишем новые задачи «Идеи» -->
        <div id="tdl4App">
          <input type="text" class="form-control" placeholder="Новая задача">
          <!-- Создаём пока ещё пустой список «Идеи» -->
          <div class="tdl4Div">
            <ul class="List list-unstyled">
              <!-- Тут появятся наши задачи, когда мы их добавим -->
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js">
    </script>
    <script>
    // Заводим переменные под наши задачи
    var List1 = $('#tdl1App ul');
    var Mask1 = 'tdl1_';
    var List2 = $('#tdl2App ul');
    var Mask2 = 'tdl2_';
    var List3 = $('#tdl3App ul');
    var Mask3 = 'tdl3_';
    var List4 = $('#tdl4App ul');
    var Mask4 = 'tdl4_';
    // Функция, которая берёт из памяти наши задачи и делает из них список
    function showTasks() {
      // Узнаём размер хранилища
      var Storage_size = localStorage.length;
      // Если в хранилище что-то есть…
      if (Storage_size > 0) {
        // то берём и добавляем это в задачи
        for (var i = 0; i < Storage_size; i++) {
          var key = localStorage.key(i);
          // обрабатываем первый список
          if (key.indexOf(Mask1) == 0) {
            // и делаем это элементами списка
            $('<li></li>').addClass('tdItem')
              .attr('data-itemid', key)
              .text(localStorage.getItem(key))
              .appendTo(List1);
          }
          // обрабатываем второй список
          if (key.indexOf(Mask2) == 0) {
            // и делаем это элементами списка
            $('<li></li>').addClass('tdItem')
              .attr('data-itemid', key)
              .text(localStorage.getItem(key))
              .appendTo(List2);
          }
          // обрабатываем третий список
          if (key.indexOf(Mask3) == 0) {
            // и делаем это элементами списка
            $('<li></li>').addClass('tdItem')
              .attr('data-itemid', key)
              .text(localStorage.getItem(key))
              .appendTo(List3);
          }
          // обрабатываем четвёртый список
          if (key.indexOf(Mask4) == 0) {
            // и делаем это элементами списка
            $('<li></li>').addClass('tdItem')
              .attr('data-itemid', key)
              .text(localStorage.getItem(key))
              .appendTo(List4);
          }
        }
      }
    }
    // Сразу вызываем эту функцию, вдруг в памяти уже остались задачи с прошлого раза
    showTasks();
    // Следим, когда пользователь напишет новую задачу в первое поле ввода и нажмёт Enter
    $('#tdl1App input').on('keydown', function (e) {
      if (e.keyCode != 13) return;
      var str = e.target.value;
      e.target.value = "";
      // Если в поле ввода было что-то написано — начинаем обрабатывать
      if (str.length > 0) {
        var number_Id_1 = 0;
        List1.children().each(function (index, el) {
          var element_Id_1 = $(el).attr('data-itemid').slice(5);
          if (element_Id_1 > number_Id_1)
            number_Id_1 = element_Id_1;
        })
        number_Id_1++;
        // Отправляем новую задачу сразу в память
        localStorage.setItem(Mask1 + number_Id_1, str);
        // и добавляем её в конец списка
        $('<li></li>').addClass('tdItem')
          .attr('data-itemid', Mask1 + number_Id_1)
          .text(str).appendTo(List1);
      }
    });
    // Следим, когда пользователь напишет новую задачу во второе поле ввода и нажмёт Enter
    $('#tdl2App input').on('keydown', function (e) {
      if (e.keyCode != 13) return;
      var str = e.target.value;
      e.target.value = "";
      // Если в поле ввода было что-то написано — начинаем обрабатывать
      if (str.length > 0) {
        var number_Id_2 = 0;
        List2.children().each(function (index, el) {
          var element_Id_2 = $(el).attr('data-itemid').slice(5);
          if (element_Id_2 > number_Id_2)
            number_Id_2 = element_Id_2;
        })
        number_Id_2++;
        // Отправляем новую задачу сразу в память
        localStorage.setItem(Mask2 + number_Id_2, str);
        // и добавляем её в конец списка
        $('<li></li>').addClass('tdItem')
          .attr('data-itemid', Mask2 + number_Id_2)
          .text(str).appendTo(List2);
      }
    });
    // Следим, когда пользователь напишет новую задачу в третье поле ввода и нажмёт Enter
    $('#tdl3App input').on('keydown', function (e) {
      if (e.keyCode != 13) return;
      var str = e.target.value;
      e.target.value = "";
      // Если в поле ввода было что-то написано — начинаем обрабатывать
      if (str.length > 0) {
        var number_Id_3 = 0;
        List3.children().each(function (index, el) {
          var element_Id_3 = $(el).attr('data-itemid').slice(5);
          if (element_Id_3 > number_Id_3)
            number_Id_3 = element_Id_3;
        })
        number_Id_3++;
        // Отправляем новую задачу сразу в память
        localStorage.setItem(Mask3 + number_Id_3, str);
        // и добавляем её в конец списка
        $('<li></li>').addClass('tdItem')
          .attr('data-itemid', Mask3 + number_Id_3)
          .text(str).appendTo(List3);
      }
    });
    // Следим, когда пользователь напишет новую задачу в четвёртое поле ввода и нажмёт Enter
    $('#tdl4App input').on('keydown', function (e) {
      if (e.keyCode != 13) return;
      var str = e.target.value;
      e.target.value = "";
      // Если в поле ввода было что-то написано — начинаем обрабатывать
      if (str.length > 0) {
        var number_Id_4 = 0;
        List4.children().each(function (index, el) {
          var element_Id_4 = $(el).attr('data-itemid').slice(5);
          if (element_Id_4 > number_Id_4)
            number_Id_4 = element_Id_4;
        })
        number_Id_4++;
        // Отправляем новую задачу сразу в память
        localStorage.setItem(Mask4 + number_Id_4, str);
        // и добавляем её в конец списка
        $('<li></li>').addClass('tdItem')
          .attr('data-itemid', Mask4 + number_Id_4)
          .text(str).appendTo(List4);
      }
    });
    // По клику на задаче — убираем её из списка
    $(document).on('click', '.tdItem', function (e) {
      // Находим задачу, по которой кликнули
      var jet = $(e.target);
      // Убираем её из памяти
      localStorage.removeItem(jet.attr('data-itemid'));
      // и убираем её из списка
      jet.remove();
    })
  // Закончился основной скрипт
  </script>
<script>
        // Функция для загрузки задач из localStorage
        function loadTasks(todoAppId) {
            const tasks = JSON.parse(localStorage.getItem(todoAppId)) || [];
            const list = document.querySelector({todoAppId} .List);
            tasks.forEach(task => {
                addTaskToDOM(task, list);
            });
        }

        // Функция для добавления задачи в DOM
        function addTaskToDOM(taskText, list) {
            const li = document.createElement('li');
            li.className = 'tdItem list-group-item';
            li.textContent = taskText;

            const deleteBtn = document.createElement('span');
            deleteBtn.textContent = 'Удалить';
            deleteBtn.className = 'delete-btn';
            deleteBtn.onclick = () => {
                li.remove();
                removeTaskFromStorage(taskText, list.parentElement.id);
            };

            li.appendChild(deleteBtn);
            list.appendChild(li);
        }

        // Функция для добавления задачи
        function addTask(todoAppId) {
            const input = document.querySelector({todoAppId} input);
            const taskText = input.value.trim();
            if (taskText) {
                const list = document.querySelector({todoAppId} .List);
                addTaskToDOM(taskText, list);
                saveTaskToStorage(taskText, todoAppId);
                input.value = '';
            }
        }

        // Сохранение задачи в localStorage
        function saveTaskToStorage(taskText, todoAppId) {
            const tasks = JSON.parse(localStorage.getItem(todoAppId)) || [];
            tasks.push(taskText);
            localStorage.setItem(todoAppId, JSON.stringify(tasks));
        }

        // Удаление задачи из localStorage
        function removeTaskFromStorage(taskText, todoAppId) {
            let tasks = JSON.parse(localStorage.getItem(todoAppId)) || [];
            tasks = tasks.filter(task => task !== taskText);
            localStorage.setItem(todoAppId, JSON.stringify(tasks));
        }

        // Обработка событий нажатия клавиши Enter
        document.querySelectorAll('input').forEach(input => {
html

            input.addEventListener('keypress', function (event) {
                if (event.key === 'Enter') {
                    const todoAppId = this.parentElement.id;
                    addTask(todoAppId);
                }
            });
        });

        // Загрузка задач при загрузке страницы
        window.onload = () => {
            document.querySelectorAll('.col-md-3').forEach(app => loadTasks(app.id));
        };
    // Функция для загрузки задач из localStorage
    function loadTasks(todoAppId) {
        const tasks = JSON.parse(localStorage.getItem(todoAppId)) || [];
        const list = document.querySelector({todoAppId} .List);
        tasks.forEach(task => {
            addTaskToDOM(task, list);
        });
    }
    
    // Функция для добавления задачи в DOM
    function addTaskToDOM(taskText, list) {
        const li = document.createElement('li');
        li.className = 'tdItem list-group-item';
        li.textContent = taskText;
    
        const deleteBtn = document.createElement('span');
        deleteBtn.textContent = 'Удалить';
        deleteBtn.className = 'delete-btn';
        deleteBtn.onclick = () => {
            li.remove();
            removeTaskFromStorage(taskText, list.parentElement.id);
            updateTaskCounter();
        };
    
        li.appendChild(deleteBtn);
        list.appendChild(li);
        updateTaskCounter();
    }
    
    // Функция для добавления задачи
    function addTask(todoAppId) {
        const input = document.querySelector({todoAppId} input);
        const taskText = input.value.trim();
        if (taskText) {
            const list = document.querySelector({todoAppId} .List);
            addTaskToDOM(taskText, list);
            saveTaskToStorage(taskText, todoAppId);
            input.value = '';
        }
    }
    
    // Сохранение задачи в localStorage
    function saveTaskToStorage(taskText, todoAppId) {
        const tasks = JSON.parse(localStorage.getItem(todoAppId)) || [];
        tasks.push(taskText);
        localStorage.setItem(todoAppId, JSON.stringify(tasks));
        updateTaskCounter();
    }
    
    // Удаление задачи из localStorage
    function removeTaskFromStorage(taskText, todoAppId) {
        let tasks = JSON.parse(localStorage.getItem(todoAppId)) || [];
        tasks = tasks.filter(task => task !== taskText);
        localStorage.setItem(todoAppId, JSON.stringify(tasks));
    }
    
    // Обновление счетчика выполненных задач
    function updateTaskCounter() {
        const completedTasks = document.querySelectorAll('.tdItem').length;
        document.getElementById('taskCounter').innerText = completedTasks;
    }
    
    // Сброс счетчика выполненных задач
    function resetTaskCounter() {
        document.querySelectorAll('.tdItem').forEach(task => task.remove());
        localStorage.clear();
        updateTaskCounter();
    }
    
    // Загрузка задач для каждого списка
    loadTasks('tdl1App');
    loadTasks('tdl2App');
    loadTasks('tdl3App');
    loadTasks('tdl4App');
    
    // Добавление задачи при нажатии Enter для каждого списка
    document.querySelector('#tdl1App input').addEventListener('keydown', function (e) {
        if (e.keyCode === 13) {
            addTask('tdl1App');
        }
    });
    
    document.querySelector('#tdl2App input').addEventListener('keydown', function (e) {
        if (e.keyCode === 13) {
            addTask('tdl2App');
        }
    });
    
    document.querySelector('#tdl3App input').addEventListener('keydown', function (e) {
        if (e.keyCode === 13) {
            addTask('tdl3App');
        }
    });
    
    document.querySelector('#tdl4App input').addEventListener('keydown', function (e) {
        if (e.keyCode === 13) {
            addTask('tdl4App');
        }
    });
    
    // Добавление функциональности для кнопки сброса
    document.getElementById('resetCounterBtn').addEventListener('click', resetTaskCounter);
    </script>
    
</body>
<!-- конец всей страницы -->

</html>
